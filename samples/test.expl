type
  list{
	int data;
	list next;
	list prev;
  }
endtype

class
linkedlist{
decl
   list head;
   list tail;
   int length;
   list gethead();
   list gettail();
   int init();
   int insert(int data);
   int print(list temp);
enddecl
   list gethead(){
		begin
			return self.head;
		end
   }
   list gettail(){
		begin
			return self.tail;
		end
   }
   int init(){
		begin
			self.head=null;
			self.tail=null;
			self.length=0;
			return 1;
		end
   }
   int insert(int data){
		decl
			list temp;
		enddecl
		begin
			temp=alloc();
			temp.data=data;
			temp.next=null;
			temp.prev=null;
			if(self.head== null)then
				self.head=temp;
				self.tail=temp;
			else
				self.tail.next=temp;
				self.tail=temp;
			endif;
			self.length=self.length+1;
			return 1;
		end
   }
   int print(list temp){
		decl
			int a;
		enddecl
		begin
			if(temp!=null) then
				a=self.print(temp.next);
				write(temp.data);
			else
				write("LL");
			endif;
			return 1;
		end
   }
}

doublelinkedlist extends linkedlist{
decl
	int insert(int data);
	int print(list temp);
enddecl
  int insert(int data){
		decl
			list temp;
		enddecl
		begin
			temp=alloc();
			temp.data=data;
			temp.next=null;
			temp.prev=null;
			if(self.head== null)then
				self.head=temp;
				self.tail=temp;
			else
				self.tail.next=temp;
				temp.prev=self.tail;
				self.tail=temp;
			endif;
			self.length=self.length+1;
			return 1;
		end
  }

  int print(list temp){
		begin
			write("DLL");
			while(temp!=null) do
				write(temp.data);
				temp=temp.prev;
			endwhile;
			return 1;
		end
  }
}
endclass
decl
	linkedlist obj;
	doublelinkedlist dobj;
enddecl
int main(){
	decl
		int x,y,z;
		list a;
	enddecl
	begin
		x=initialize();

		obj=new(linkedlist);
		x=obj.init();
		read(x);
		while(x!=0)do
			read(y);
			z=obj.insert(y);
			x=x-1;
		endwhile;
		x=obj.print(obj.gethead());

		dobj=new(doublelinkedlist);
		x=dobj.init();
		a=obj.gethead();
		while(a!=null) do
			z=dobj.insert(a.data);
			a=a.next;
		endwhile;
		x=dobj.print(dobj.gettail());
		return 1;
	end
}
